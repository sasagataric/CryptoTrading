// <auto-generated />
using System;
using CryptoTrading.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoTrading.Data.Migrations
{
    [DbContext(typeof(CryptoTradingContext))]
    [Migration("20210519001309_ChangedNameForCoinInUser")]
    partial class ChangedNameForCoinInUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoinUser", b =>
                {
                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WatchListCoinsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UsersId", "WatchListCoinsId");

                    b.HasIndex("WatchListCoinsId");

                    b.ToTable("WatchList");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.Coin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.PurchasedCoin", b =>
                {
                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoinId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,10)");

                    b.HasKey("WalletId", "CoinId");

                    b.HasIndex("CoinId");

                    b.ToTable("PurchasedCoin");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,10)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.WalletHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,10)");

                    b.Property<string>("CoinId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CoinPrice")
                        .HasColumnType("decimal(18,10)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletHistorys");
                });

            modelBuilder.Entity("CoinUser", b =>
                {
                    b.HasOne("CryptoTrading.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoTrading.Data.Entities.Coin", null)
                        .WithMany()
                        .HasForeignKey("WatchListCoinsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.PurchasedCoin", b =>
                {
                    b.HasOne("CryptoTrading.Data.Entities.Coin", "Coin")
                        .WithMany("PurchasedCoin")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoTrading.Data.Entities.Wallet", "Wallet")
                        .WithMany("PurchasedCoin")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.Wallet", b =>
                {
                    b.HasOne("CryptoTrading.Data.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("CryptoTrading.Data.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.WalletHistory", b =>
                {
                    b.HasOne("CryptoTrading.Data.Entities.Coin", "Coin")
                        .WithMany("WalletHistorys")
                        .HasForeignKey("CoinId");

                    b.HasOne("CryptoTrading.Data.Entities.Wallet", "Wallet")
                        .WithMany("WalletHistorys")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.Coin", b =>
                {
                    b.Navigation("PurchasedCoin");

                    b.Navigation("WalletHistorys");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.User", b =>
                {
                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CryptoTrading.Data.Entities.Wallet", b =>
                {
                    b.Navigation("PurchasedCoin");

                    b.Navigation("WalletHistorys");
                });
#pragma warning restore 612, 618
        }
    }
}
